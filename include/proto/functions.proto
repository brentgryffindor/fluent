//  Copyright 2018 U.C. Berkeley RISE Lab
// 
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
// 
//      http://www.apache.org/licenses/LICENSE-2.0
// 
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.

syntax = "proto2";

message Function {
  required string name = 1;
  required bytes body = 2;
}

enum SerializerType {
  DEFAULT = 0;
  STRING = 1;
  NUMPY = 2;
}

enum ErrorType {
  FUNC_NOT_FOUND = 0;
  NOT_PINNED = 1;
  INVALID_TARGET = 2;
  EXEC_ERROR = 3;
  NO_SUCH_DAG = 4;
  NO_RESOURCES = 5;
  DAG_ALREADY_EXISTS = 6;
  KEY_DNE = 7;
  ABORT = 8;
  NO_ERROR = 9;
}

enum ConsistencyType {
  NORMAL = 0;
  SINGLE = 1;
  CROSS = 2;
}

enum UpdateType {
  PERIODIC = 0;
  POST_REQUEST = 1;
}

message Value {
  required bytes body = 1;
  optional SerializerType type = 2;
}

message FunctionCall {
  required string name = 1;
  required uint32 request_id = 2;
  repeated Value args = 3;
  optional string resp_id = 4;
}

message FunctionList {
  repeated string names = 1;
}

message Dag {
  message DagPair {
    required string source = 1;
    required string sink = 2;
  }

  required string name = 1;
  repeated string functions = 2;
  repeated DagPair connections = 3;
}

message ArgList { 
  repeated Value args = 1;
}

message DagCall {
  required string name = 1;
  map<string, ArgList> function_args = 2;
  required ConsistencyType consistency = 3 [default = NORMAL];
  optional string response_address = 4;
  optional string output_key = 5;
  optional string client_id = 6;
}

message GenericResponse {
  required bool success = 1;
  optional string response_id = 2;
  optional ErrorType error = 3;
}

message ThreadStatus {
  required string ip = 1;
  required uint32 tid = 2;
  repeated string functions = 3;
  optional double utilization = 4;
  required UpdateType type = 5;
  required bool running = 6 [default = true];
}

message DagSchedule {
  required string id = 1;
  required Dag dag = 2;
  required string target_function = 3;
  required ConsistencyType consistency = 4 [default = NORMAL]; 
  repeated string triggers = 5;
  map<string, string> locations = 6; // which functions should be executed where
  // the pre-fixed arguments for each stage (i.e., the arguments that do not depend on the previous stage)
  map<string, ArgList> arguments = 7; 
  optional string response_address = 8;
  optional string output_key = 9;
  optional string client_id = 10;
  repeated string full_read_set = 11;
}

message VersionedKey {
  required string key = 1;
  map<string, uint32> vector_clock = 2;
}

message VersionedKeyList { 
  repeated VersionedKey versioned_keys = 1;
}

message PriorVersionTuple {
  required string cache_address = 1;
  required string function_name = 2;
  required VersionedKey versioned_key = 3;
}

message DagTrigger {
  required string id = 1;
  required string target_function = 2; // which function is this trigger for
  required string source = 3;
  optional bool abort = 4; // whether the DAG should be aborted under causal consistency
  optional ArgList arguments = 5;
  repeated PriorVersionTuple prior_version_tuples = 6;
  repeated VersionedKey prior_read_map = 7;
  repeated VersionedKey dependencies = 8;
}

message ExecutorStatistics {
  message FunctionStatistics {
    required string fname = 1;
    optional uint32 call_count = 2;
    optional double runtime = 3;
  }

  repeated FunctionStatistics statistics = 1;
}

message SchedulerStatus {
  message FunctionLocation {
    required string name = 1;
    required string ip = 2;
    required uint32 tid = 3;
  }

  repeated string dags = 1;
  repeated FunctionLocation func_locations = 2; 
}
message CausalTuple {
  required string key = 1;
  optional bytes payload = 2;
}

message CausalGetRequest {
  required ConsistencyType consistency = 1;
  required bool conservative = 2;
  required string client_id = 3;
  required string function_name = 4;
  repeated string keys = 5;
  repeated string full_read_set = 6;
  repeated VersionedKey prior_read_map = 7;
  repeated PriorVersionTuple prior_version_tuples = 8;
  optional string response_address = 9;
}

message CausalGetResponse {
  repeated CausalTuple tuples = 1;
  required ErrorType error = 2;
  repeated PriorVersionTuple prior_version_tuples = 3;
}

message CausalPutRequest {
  required string response_address = 1;
  repeated CausalTuple tuples = 2;
}

message CausalPutResponse {
  repeated string keys = 1;
}

message CausalSchedulerRequest {
  required string client_id = 1;
  required string function_name = 2;
  required string scheduler_address = 3;
  repeated string keys = 4;
  repeated string full_read_set = 5;
}

message CausalSchedulerResponse {
  required string client_id = 1;
  required string function_name = 2;
  required bool succeed = 3;
  map<string, VersionedKeyList> version_chain = 4;
}

message VersionedKeyRequestTuple {
  required string function_name = 1;
  required string key = 2;
}

message VersionedKeyRequest {
  required string response_address = 1;
  required string client_id = 2;
  required string function_name = 3;
  repeated VersionedKeyRequestTuple versioned_key_request_tuples = 4;
}

message VersionedKeyResponse {
  required string client_id = 1;
  required string function_name = 2;
  repeated CausalTuple tuples = 3;
}

message FunctionKeyPair {
  required string source_function_name = 1;
  required string target_function_name = 2;
  required string key = 3;
}

message PerCacheFunctionKeyPair {
  required string cache_address = 1;
  repeated FunctionKeyPair function_key_pairs = 2;
}

message PerFunctionReadSet {
  required string function_name = 1;
  repeated string keys = 2;
}

message SchedulerKeyShippingRequest {
  required string client_id = 1;
  required string response_address = 2;
  repeated PerFunctionReadSet per_function_readsets = 3;
  repeated PerCacheFunctionKeyPair per_cache_function_key_pairs = 4;
}

message SchedulerKeyShippingResponse {
  required string client_id = 1;
  required string cache_address = 2;
}

message KeyShippingRequest {
  required string client_id = 1;
  required string response_address = 2;
  repeated FunctionKeyPair function_key_pairs = 3;
}

message FunctionCausalTuplePair {
  required string function_name = 1;
  required CausalTuple tuple = 2;
}

message KeyShippingResponse {
  required string client_id = 1;
  required string cache_address = 2;
  repeated FunctionCausalTuplePair function_causal_tuple_pairs = 3;
}

message ScheduleGCRequest {
  required string function_name = 1;
  required string schedule_id = 2;
}